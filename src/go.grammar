include "./javadoc.grammar" as doccomment

start top { whitespace separated(Statement) }

skip whitespace {
  context Statement {
    (const | var) MaybeSet(declName ("," declName)* Type? (op("=") CommaSep(Expr))?) |
    type MaybeSet(declName Type) |
    import MaybeSet(("." | declName)? string) |
    package variableName |
    IfStatement |
    SwitchStatement |
    ForStatement |
    func FunctionDecl |
    (go | defer) Expr |
    return CommaSep(Expr) |
    (break | continue) identifier? |
    (default | case CommaSep(Expr) | label) ":" |
    Block |
    select Block |
    goto identifier |
    fallthrough |
    case Statement ":" |
    Expr ("," Expr)*
  }

  context IfStatement {
    if ExprNoBrace (";" ExprNoBrace)? Block (else (if ExprNoBrace (";" ExprNoBrace)?)? Block)*
  }

  context ForStatement {
    for ((AssignedNames ExprNoBrace | ExprNoBrace) (";" ExprNoBrace?)*)? Block
  }

  context SwitchStatement {
    switch (ExprNoBrace (";" ExprNoBrace?)?)? Block
  }

  MaybeSet(inner) { Set(inner) | inner }
  context Set(inner) { "(" separated(inner) ")" }

  Expr {
    AssignedNames Expr |
    ExprPrefix* (!func maybe(Type ~"{") | BaseExpr) (ExprSuffix(Expr) | LiteralBody)*
  }

  ExprNoBrace {
    AssignedNames Expr |
    ExprPrefix* BaseExpr ExprSuffix(ExprNoBrace)*
  }

  BaseExpr {
    number |
    string |
    atom |
    func FunctionExpr |
    make TypeList |
    builtin |
    calleeName |
    variableName |
    Bracketed Type? |
    "*" Type |
    ParenExpr
  }

  context FunctionDecl { ("(" declName Type ")")? funcName? ParamList (ParamList | Type)? Block? }
  context FunctionExpr { ParamList (ParamList | Type)? Block }
  context ParenExpr { "(" CommaSep(Expr) ")" }
  context LiteralBody { "{" CommaSep((propNameColon | LiteralBody | Expr) (":" (LiteralBody | Expr))?) "}" }
  context TypeList { "(" CommaSep(Type) ")" }

  ExprPrefix {
    prefixOp | range
  }

  ExprSuffix(Expr) {
    ".(" Type ")" |
    "." (calleeProp | propName) |
    suffixOp |
    binOp Expr |
    ArgList |
    Bracketed
  }

  context Bracketed { "[" CommaSep(Expr) (":" Expr?)* "]" }

  context ArgList { "(" CommaSep(Expr) "..."? ")" }

  CommaSep(expr) { (expr ("," expr?)*)? }

  context Block { "{" separated(Statement) "}" }

  Type {
    "[" Expr? "]" Type |
    struct StructBody |
    interface InterfaceBody |
    "*" Type |
    func ParamList (ParamList | Type)? |
    map "[" Type "]" Type |
    (op("<-") | chan op("<-")?) Type |
    "(" Type ")" |
    typeQualifier* typeName
  }

  context StructBody {
    "{" separated((~(identifier (identifierStart | "[" | "," | "*" | "<" | "(")) propDeclName ("," propDeclName)* | "*")? Type string?) "}"
  }

  context InterfaceBody {
    "{" separated(propNameParen ParamList (ParamList | Type)? | Type) "}"
  }

  context ParamList {
    "(" CommaSep((declName ("," declName)*)? "..."? Type?) ")"
  } 

  AssignedNames {
    ~(identifier ("," identifier)* ":=")
    declName ("," declName)* op(":=")
  }
}

tokens {
  break { kw("break") }
  default { kw("default") }
  func { kw("func") }
  interface { kw("interface") }
  select { kw("select") }
  case { kw("case") }
  defer { kw("defer") }
  go { kw("go") }
  map { kw("map") }
  struct { kw("struct") }
  chan { kw("chan") }
  else { kw("else") }
  goto { kw("goto") }
  package { kw("package") }
  switch { kw("switch") }
  const { kw("const") }
  fallthrough { kw("fallthrough") }
  if { kw("if") }
  range { kw("range") }
  type { kw("type") }
  continue { kw("continue") }
  for { kw("for") }
  import { kw("import") }
  return { kw("return") }
  var { kw("var") }
  make="builtin" { "make" !identifierChar }

  atom="atom" { ("true" | "false" | "nil" | "iota") !identifierChar }

  builtin="builtin" {
    ("append" | "cap" | "close" | "complex" | "copy" | "delete" | "imag" |
     "len" | "new" | "panic" | "print" | "println" | "real" |
     "recover") !identifierChar
  }

  binOp="operator" {
    ("+" | "&" "^"? | "-" | "|" | "*" | "^" | "/" | "<" "<"? | ">" ">"? | "%" | "=") "="? |
    "<-" | "=" | ":=" | "!="
  }
  prefixOp="operator" { "!" | "+" | "-" | "*" | "^" | "&" | "<-" }
  suffixOp="operator" { "++" | "--" }

  number="number" {
    ("0o" | "0O") "0"-"7"+ |
    ("0x" | "OX") (digit | "a"-"f" | "A"-"F")+ |
    (digit digit* ("." digit+)? | "." digit+) (("e" | "E") ("+" | "-")? digit+)? "i"?
  }

  string="string" {
    "'" ("\\" . (!"'" .)* | .) "'" |
    "\"" ("\\" . | (!"\"" .))* "\"" |
    "`" (!"`" _)* "`"
  }

  variableName="variable" { identifier }

  comment="comment" { doccomment.comment | "/*" (!"*/" _)* "*/" | "//" .* }
}

kw(word)="keyword" { word !identifierChar }
op(expr)="operator" { expr }

separated(expr) {
  (whitespaceSimple | "\n")*
  (expr (whitespaceSimple | ";" | "\n")*)*
}

identifier { identifierStart identifierChar* }

declName="def" { identifier }
context funcName { declName }
propDeclName="def property" { identifier }
calleeName="variable callee" { identifier ~"(" }
calleeProp="property callee" { identifier ~"(" }
propName="property" { identifier }
propNameParen="property" { identifier ~(" "* "(") }
propNameColon="property" { identifier ~(" "* ":") }
typeName="type" { identifier }
typeQualifier="meta" { identifier "." }
label { identifier ~(" "* ":" !"=") }

maybe(expr) { ~expr expr }

whitespaceSimple { (" " | "\t" | comment) }
whitespace { (whitespaceSimple | ~"\n" &skippableNewline "\n")* }

identifierStart { letter | "_" }
identifierChar { letter | digit | "_" }
letter { "a"-"z" | "A"-"Z" | "\u00a1"-"\uffff" | "_" }
digit { "0"-"9" }
