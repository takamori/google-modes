skip whitespace {
  start top { whitespace ("\n" | Statement)* }

  context Statement {
    (if | whileElif) Expr ":" Body |
    (else | tryFinally) ":" Body |
    for CommaSep(assignedName | ExprNoIn) in CommaSep(Expr) ":" Body |
    except Expr (as declName)? ":" Body |
    async AsyncStatement |
    AsyncStatement |
    Annotation ArgList? "\n" |
    SimpleStatement
  }

  AsyncStatement {
    with CommaSep(Expr (as declName)?) ":" Body |
    def declName FuncDef |
    class ClassDef
  }

  SimpleStatement {
    SmallStatement (";" SmallStatement?)* "\n"
  }

  SmallStatement {
    passBreakCont |
    del CommaSep(Expr) |
    returnAssert CommaSep(Expr)? |
    raise CommaSep(Expr) (from Expr)? |
    import CommaSep(Expr (as declName)?) |
    from "."* Expr? import ("*" | "(" CommaSep(identifier (as declName?))? ")" | CommaSep(identifier (as declName)?)) |
    globalNonlocal CommaSep(variableName) |
    CommaSep(assignedName) op("=") Expr |
    CommaSep(Expr)
  }

  Annotation="meta" { "@" identifier ("." identifier)* }

  context ArgList { "(" CommaSep((op("**") | labelName "=")? Expr)? ")" }

  context ParamList { "(" CommaSep(op("*" "*"?)? (self | declName) (":" Expr)? (op("=") Expr)?)? ")" }

  Expr {
    ExprPrefix* BaseExpr (ExprSuffix(Expr) | in Expr)*
  }

  ExprNoIn {
    ExprPrefix* BaseExpr ExprSuffix(ExprNoIn)*
  }

  ExprPrefix {
    prefixOp |
    prefixKw
  }

  BaseExpr {
    ParenExpr |
    ArrayLiteral |
    ObjectLiteral |
    number |
    string+ |
    op("...") |
    atom |
    self |
    yield (from Expr | CommaSep(Expr)?) |
    lambda LambdaDef |
    builtin |
    calleeName |
    variableName
  }

  ExprSuffix(Expr) {
    (binop | binopKw) Expr |
    ArgList |
    Subscript |
    "." (calleeProp | propName) |
    if Expr (else Expr)?
  }

  context LambdaDef { CommaSep(op("*" | "**")? declName (op("=") Expr)?)? ":" Expr }
  context ClassDef { typeDeclName ArgList? ":" Body }
  context FuncDef { ParamList ("->" Expr)? ":" Body }

  MaybeComp { (compLocalName | Expr) ("," CommaSep(Expr)? | CompFor)? }
  CompFor { async? for CommaSep(assignedName | ExprNoIn) in Expr (CompFor | CompIf)? }
  CompIf { if Expr (CompFor | CompIf)? }

  context ParenExpr { "(" MaybeComp? ")" }

  context ArrayLiteral { "[" MaybeComp? "]" }

  context ObjectLiteral {
   "{" (CommaSep(DictProp) CompFor?)? "}"
  }

  context DictProp {
    op("**") Expr | Expr (":" Expr)?
  }

  context Subscript { "[" CommaSep(Expr (":" Expr?)? | ":" Expr? (":" Expr?)?) "]" }

  CommaSep(expr) { expr ("," expr?)* }

  Body { SimpleStatement | indentedBody }
}

tokens {
  if { kw("if") }
  whileElif { kw("while" | "elif") }
  else { kw("else") }
  tryFinally { kw("try" | "finally") }
  for { kw("for") }
  in { kw("in") }
  as { kw("as") }
  async { kw("async") }
  def { kw("def") }
  except { kw("except") }
  class { kw("class") }
  with { kw("with") }
  lambda { kw("lambda") }
  del { kw("del") }
  yield { kw("yield") }
  raise { kw("raise") }
  from { kw("from") }
  import { kw("import") }
  passBreakCont { kw("pass" | "break" | "continue") }
  globalNonlocal { kw("global" | "nonlocal") }
  returnAssert { kw("return" | "assert") }
  prefixKw { kw("not" | "await") }
  atom="atom" { ("None" | "True" | "False") !identifierChar }
  self="atom" { "self" !identifierChar }
  binopKw { kw("or" | "and" | "in" | "is" (" "+ "not")? | "not" (" "+ "in")?) }

  builtin="builtin" {
    ("abs" | "all" | "any" | "bin" | "bool" | "bytearray" | "callable" | "chr" |
     "classmethod" | "compile" | "complex" | "delattr" | "dict" | "dir" | "divmod" |
     "enumerate" | "eval" | "filter" | "float" | "format" | "frozenset" |
     "getattr" | "globals" | "hasattr" | "hash" | "help" | "hex" | "id" |
     "input" | "int" | "isinstance" | "issubclass" | "iter" | "len" |
     "list" | "locals" | "map" | "max" | "memoryview" | "min" | "next" |
     "object" | "oct" | "open" | "ord" | "pow" | "property" | "range" |
     "repr" | "reversed" | "round" | "set" | "setattr" | "slice" |
     "sorted" | "staticmethod" | "str" | "sum" | "super" | "tuple" |
     "type" | "vars" | "zip" | "__import__" | "NotImplemented" |
     "Ellipsis" | "__debug__" | "ascii" | "bytes" | "exec" | "print") !identifierChar
  }

  binop {
    op(("^" | "&" | "|" | "<<" | ">>" | "+" | "-" | "*" "*"? | "@" | "/" | "%" | "/") "="? |
       "=" | "<" | ">" | "==" | ">=" | "<=" | "<>" | "!=")
  }
  prefixOp { op("*" | "+" | "-" | "~") }

  number="number" {
    ("0b" | "OB") ("0" | "1" | "_")+ |
    ("0o" | "0O") ("0"-"7" | "_")+ |
    ("0x" | "OX") (digit | "a"-"f" | "A"-"F" | "_")+ |
    (digit (digit | "_")* ("." (digit | "_")+)? | "." (digit | "_")+) (("e" | "E") ("+" | "-")? (digit | "_")+)? ("j" | "J")?
  }

  string="string" {
    ("u" | "U" | "r" | "R" | "f" | "F" | "b" | "B")+ ~("'" | "\"") stringQuoted |
    stringQuoted
  }

  variableName="variable" { identifier }

  comment="comment" { "#" .* }
}

stringQuoted {
  "'''" ("\\" _ | !"'''" _)* "'''" |
  "\"\"\"" ("\\" _ | !"\"\"\"" _)* "\"\"\"" |
  "'" ("\\" . | !"'" .)* "'" |
  "\"" ("\\" . | !"\"" .)* "\""
}

kw(word)="keyword" { word !identifierChar }
op(expr)="operator" { expr }

context indentedBody { "\n" (whitespaceSimple | "\n")* (&stillIndented Statement (whitespaceSimple | "\n")*)+ }

identifier { identifierStart identifierChar* }

declName="def" { identifier }
typeDeclName="type def" { identifier }
assignedName="def" { identifier ~(" "* ("," " "* identifier " "*)* ("=" | "in" !identifierChar)) }
labelName="meta" { identifier ~(" "* "=") }
calleeName="variable callee" { identifier ~"(" }
calleeProp="property callee" { identifier ~"(" }
propName="property" { identifier }
compLocalName="variable-2" { identifier &isCompLocal }

whitespaceSimple { (" " | "\t" | comment) }

whitespace { (whitespaceSimple | "\\\n" | ~"\n" &maySkipNewline "\n")* }

identifierStart { letter | "_" }
identifierChar { letter | digit | "_" }
letter { "a"-"z" | "A"-"Z" | "\u00a1"-"\uffff" | "_" }
digit { "0"-"9" }
