include "./javadoc.grammar" as doccomment

start top {
  preprocessorLine? (whitespace Statement)+
}

skip whitespace {
  context Statement {
    Enum |
    Loop |
    Conditional |
    Switch |
    Block |
    breakCont ";" |
    goto identifier ";" |
    return Expression? ";" |
    Struct |
    Label |
    Macro ";"? |
    DeclType DeclRest |
    ";" |
    Expression ";"
  }

  context DeclType {
    ((modifier | qualifier)+ (auto | typeName) | typeModifier+ modifiableType?) TypeSuffix* | MaybeType
  }   

  DeclRest {
    Declarator
    (Macro ";"? |
     ~("(" (")" | modifier | qualifier | typeModifier | auto | maybeTypeName)) FunctionDef |
     Initializer? ("," declName Initializer?)* ";")
  }

  Declarator {
    declOp* declName ("[" "]")* | "(" Declarator ")"
  }

  Loop {
    for "(" Statement Expression? ";" Expression? ")" Statement |
    while CondExpr Statement |
    do Statement while CondExpr ";"
  }

  Switch {
    switch CondExpr Block
  }

  Label {
    (default | case Expression | labelIdentifier) ":"
  }

  context Block {
    "{" Statement* "}"
  }

  context BlockOf(element, separator) {
    "{" (element (separator element?)*)? "}"
  }

  Enum { enum typeDeclName? BlockOf(propDeclName (op("=") Expression)?, ",")? }

  Initializer { op("=") Expression }

  context FunctionDef { ParamList (";" | Block) }

  context ParamList { "(" ListOf(Type (Declarator ParamList?)?) ")" }

  Expression {
    ExpressionPrefix* BaseExpression ExpressionSuffix*
  }

  ExpressionPrefix {
    prefixOp
  }

  BaseExpression {
    ParenExpr Expression? |
    atom |
    number |
    string |
    BlockOf(Expression, ",") |
    sizeof ("(" Type ")" | "..."? Expression) 
    macroName |
    variableName
  }

  context ParenExpr { "(" Expression? ")" }
  context CondExpr { "(" Expression? ")" }

  ExpressionSuffix {
    ArgList |
    "[" Expression "]" |
    suffixOp |
    ("->" | ".") fieldName |
    binOp Expression |
    "?" Expression ":" Expression
  }

  context ArgList {
    "(" ListOf(Expression) ")"
  }

  MaybeType {
    (auto | maybeTypeName) TypeSuffix*
  }

  Type {
    (modifier | qualifier)* structUnion? (auto | typeName) TypeSuffix*
  }

  Struct {
    (structUnion) declName? BlockOf(StructField, ";")? ";"
  }

  StructField {
    Type fieldName? (":" number | "[" number? "]")?
  }

  TypeSuffix {
    "[" number? "]" |
    ("*" | "&") |
    qualifier
  }

  ListOf(expr) {
    (expr ("," expr)*)?
  }

  Macro {
    macroName ArgList?
  }
}

Conditional {
  if whitespace CondExpr whitespace Statement Alternative
}

context Alternative {
  whitespace (else whitespace Statement)?
}

tokens {
  enum { kw("enum") }
  return { kw("return") }
  if { kw("if") }
  else { kw("else") }
  for { kw("for") }
  while { kw("while") }
  do { kw("do") }
  breakCont { kw("break" | "continue") }
  goto { kw("goto") }
  default { kw("default") }
  case { kw("case") }
  switch { kw("switch") }
  structUnion { kw("struct" | "union") }
  sizeof { kw("sizeof" | "alignof") }
  auto { kw("auto") }
  modifier { kw("register" | "static" | "extern" | "typedef") }
  typeModifier="type" { ("unsigned" | "signed" | "long") !identifierChar }
  modifiableType="type" { ("int" | "float" | "double" | "char" | "short") !identifierChar }
  qualifier { kw("const" | "volatile") }

  atom="atom" { ("true" | "false" | "null") !identifierChar }

  macroName="meta" { "_" ("A"-"Z" | "_")+ | "A"-"Z"+ "_" ("A"-"Z" | "_")* }

  variableName { plainVariableName }

  number="number" {
    ("0x" (digit | "a"-"f" | "A"-"F")+ |
     (digit+ ("." digit*)? | "." digit+) (("e" | "E") "-"? digit+)?)
    ("L" | "l" | "U" | "u" | "F" | "f")?
  }

  string="string" {
    (("L" | "u" "8"? | "U") ~("'" | "\""))?
    ("'" ("\\" . (!"'" .)* | .) "'" |
     "\"" ("\\" _ | (!"\"" _))* "\"")
  }

  prefixOp="operator" {
    "++" | "--" | "!" | "~" | "&" | "*" | "+"
  }

  suffixOp="operator" {
    "++" | "--"
  }

  binOp="operator" {
    ("!" | "+" | "-" | "/" | "*" | "%" | ">" ">"? | "<" "<"? | "=" | "|" "|"? | "&" "&"?) "="?
  }

  comment="comment" { doccomment.comment | "/*" (!"*/" _)* "*/" | "//" .* }
}

declOp { "*" }

maybeCallee { callee | identifier }
callee="callee" { identifier ~(" "* "(") }

plainVariableName="variable" { maybeCallee }

identifier { identifierStart identifierChar* }

whitespace {
  (" " | "\t" |
   "\n" (" " | "\t")* preprocessorLine? |
   comment)*
}

preprocessorLine="meta" { "#" (!("//" | "/*" | "\\") . | "\\" _ )* }

declName="def" { identifier }
propDeclName="def property" { identifier }
typeDeclName="type def" { identifier }

fieldName="property" { maybeCallee }

typeName { typeModifier+ (whitespace modifiableType)? | typeNameInner }

typeNameInner="type" { identifier }

maybeTypeName {
  // The lookahead tries to figure out whether this identifier is
  // followed by optionally some type suffix and then another identifier
  typeNameInner ~(!identifierChar whitespace (TypeSuffix whitespace)* identifierStart)
}

kw(value)="keyword" { value !identifierChar }
op(value)="operator" { value }

letter { "a"-"z" | "A"-"Z" | "\u00a1"-"\uffff" | "_" }

digit { "0"-"9" }

identifierStart { letter }

identifierChar { letter | digit }

spaceChar { "\n" | "\t" | " " }

labelIdentifier { identifier ~(spaceChar* ":" !":") }
