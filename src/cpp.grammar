extends "./c.grammar"

skip whitespace {
  context Statement {
    Attributes |
    Class |
    StaticAssert |
    namespace declName? (op("=") variableName ";" | NamespaceBlock) |
    throw Expression ";" |
    try Block (catch "(" Type Declarator? ")" Block)* |
    asm "{" string "}" |
    Using |
    Template |
    &constructorAhead declName FunctionDef |
    super
  }

  TypeSuffix {
    TemplateArgs |
    "::" qualifiedTypeName |
    Attributes |
    super
  }

  BaseExpression {
    this |
    Lambda |
    cast "<" Type ">" "(" Expression ")" |
    super
  }

  ExpressionNoGt {
    ExpressionPrefix* BaseExpression (!">" ExpressionSuffix)*
  }

  ExpressionSuffix {
    BlockOf(Expression, ",") |
    ArgList Block? |
    super
  }

  Lambda {
    ~("[" spaceChar* ("&" | "=" | "this" | "]")) "[" ListOf("&" variableName? | "=" | this) "]" (FunctionDef | Block)
  }

  context FunctionDef {
    ParamList
    qualifier*
    ("&" | "&&")?
    (noexcept ("(" Expression ")")? | throw "(" ListOf(Type) ")")?
    Attributes?
    ("->" Type)?
    virtSpec*
    InitializerList?
    (";" | Block | op("=") (default | delete) ";")
  }

  context Template {
    export? template TemplateParams whitespace Statement
  }

  Using {
    using (typename Type | namespace? variableName) (op("=") Type)? ";"
  }


  context InitializerList { (":" ListOf(CtorInitializer)) }

  CtorInitializer { fieldName ("(" ListOf(Expression) ")" | "{" ListOf(Expression) "}") }

  ExpressionPrefix {
    delete ("[" "]")? | new ("[" "]")? ("(" Expression ")")? Attributes? | super
  }

  Type {
    typename Type | super
  }

  context TemplateParams {
    "<" ListOf(TypeParam | modifier* Type "..."? declName (op("=") ExpressionNoGt)?) ">"
  }

  TypeParam {
     (template TemplateArgs)? (class | typename) typeDeclName (op("=") (variableName | number))?
  }

  context TemplateArgs {
    "<" ListOf(TypeArg | modifier* Type "..."? (ParamList | Initializer)? | number) ">"
  }

  TypeArg {
     (template TemplateArgs)? (class | typename) Type
  }

  Class {
    (class | structUnion) Attributes? typeDeclName (":" virtual? access? Type)? (";" | ClassBody ";"?)
  }

  context ClassBody {
    "{" ClassItem* "}"
  }

  context ClassItem {
    access ":" | Template | Using | StaticAssert | Macro ";"? | Class | ObjectMember
  }

  context ObjectMember {
    (modifier | qualifier)*
    (ctorDtorName | Type PropDeclarator)
    (FunctionDef | (Initializer | ":" number | "[" number? "]")? ";" | Macro ";"?)
  }

  PropDeclarator {
    declOp* propDeclName ("[" "]")* | "(" PropDeclarator ")"
  }

  Initializer { super | BlockOf(Expression, ",") | ArgList }

  context NamespaceBlock { "{" Statement* "}" }

  Attributes {
    (alignas "(" number ")" | Attribute)+
  }
  Attribute {
    ~("[" " "* "[") "[" "[" ListOf(NameQualifier(attributeName)* attributeName ("(" BalancedToken* ")")? "..."?) "]" "]"
  }
  BalancedToken {
    number | string | identifier | binOp | "," | "(" BalancedToken* ")" | "[" BalancedToken* "]" | "{" BalancedToken* "}"
  }

  StaticAssert {
    staticAssert ArgList ";"
  }

  MatchingAngleBrackets {
    "<" (!">" (MatchingAngleBrackets | string | _))* ">"
  }
}

NameQualifier(type) { "::" | ~(type MatchingAngleBrackets? whitespace "::") type TemplateArgs? whitespace "::" }

tokens {
  namespace { kw("namespace") }
  typename { kw("typename") }
  new { kw("new") }
  delete { kw("delete") }
  this { kw("this") }
  try { kw("try") }
  catch { kw("catch") }
  throw { kw("throw") }
  noexcept { kw("noexcept") }
  asm { kw("asm") }
  export { kw("export") }
  template { kw("template") }
  class { kw("class") }
  virtual { kw("virtual") }
  access { kw("private" | "public" | "protected") }
  operator { kw("operator") }
  using { kw("using") }
  alignas { kw("alignas") }
  staticAssert { kw("static_assert") }
  cast { kw(("dynamic" | "static" | "const" | "reinterpret") "_cast") }
  virtSpec { kw("override" | "final" | "new") }
  atom="atom" { "nullptr" !identifierChar | super }


  variableName {
    NameQualifier(variableQualifier)+ (qualifiedInitializedName | qualifiedVariableName) (TemplateArgs (~"::" variableName)?)? |
    initializedName |
    unqualifiedVariableName TemplateArgs?
  }

  modifier { kw("inline" | "virtual" | "explicit" | "friend" | "constexpr") | super }

  prefixOp="operator" {
    typename | super
  }

  number="number" {
    ("0x" (digit | "a"-"f" | "A"-"F" | "'")+ |
     "0b" ("0" | "1" | "'")+ |
     (digit digits ("." digits)? | "." digit digits) (("e" | "E") "-"? digits)?)
    ("L" | "l" | "U" | "u" | "F" | "f")?
  }

  string="string" {
    "R\"" (!"(" .)* "(" (&rawStringContinues _)* "\"" | super
  }
}

digits { (digit | "'")* }

variableQualifier="variable qualifier" { identifier }

attributeName="meta" { identifier }

rawPropDeclName="def property" { identifier }
propDeclName { operator overloadableOp | rawPropDeclName }

declName { NameQualifier(declQualifier)+ qualifiedDeclName | unqualifiedDeclName }

overloadableOp { op("->*") | "," | binOp | prefixOp | "(" ")" | "[" "]" | (new | delete) ("[" "]")? }

declOp { "*" | "&&" | "&" }

unqualifiedDeclName="def" { "~"? identifier }
qualifiedDeclName="qualified def" { "~"? identifier }
declQualifier="qualifier def" { identifier }

initializedName="type" { identifier ~"{" }
qualifiedInitializedName="type qualified" { identifier ~"{" }

unqualifiedVariableName="variable" { maybeCallee }

qualifiedVariableName="qualified" { unqualifiedVariableName }

typeNameInner { (typename whitespace)? (NameQualifier(typeQualifier)+ qualifiedTypeName | unqualifiedTypeName) }

unqualifiedTypeName="type" { identifier }
qualifiedTypeName="type qualified" { identifier }
typeQualifier="type qualifier" { identifier }

maybeTypeName {
  ~(!(("new" | "delete") !identifierChar) typeNameInner whitespace (TypeSuffix whitespace)* identifierStart) typeNameInner
}

ctorDtorName="def" { &localConstructorAhead "~"? identifier }
